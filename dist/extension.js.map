{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://vscode-auto-scroll/./src/commands.ts","webpack://vscode-auto-scroll/./src/events.ts","webpack://vscode-auto-scroll/./src/scroll.ts","webpack://vscode-auto-scroll/./src/state.ts","webpack://vscode-auto-scroll/./src/statusBar.ts","webpack://vscode-auto-scroll/external commonjs \"vscode\"","webpack://vscode-auto-scroll/webpack/bootstrap","webpack://vscode-auto-scroll/./src/extension.ts"],"sourcesContent":["import * as vscode from \"vscode\";\r\nimport { State } from \"./state\";\r\n\r\nexport function registerCommands(state: State, subs: vscode.Disposable[]) {\r\n  subs.push(\r\n    vscode.commands.registerCommand(\"autoScroll.enable\", () => {\r\n      if (vscode.window.activeTextEditor) {\r\n        state.setDocumentStatus(true, vscode.window.activeTextEditor.document);\r\n      }\r\n    })\r\n  );\r\n\r\n  subs.push(\r\n    vscode.commands.registerCommand(\"autoScroll.disable\", () => {\r\n      if (vscode.window.activeTextEditor) {\r\n        state.setDocumentStatus(false, vscode.window.activeTextEditor.document);\r\n      }\r\n    })\r\n  );\r\n\r\n  subs.push(\r\n    vscode.commands.registerCommand(\"autoScroll.toggle\", () => {\r\n      if (vscode.window.activeTextEditor) {\r\n        const document = vscode.window.activeTextEditor.document;\r\n        state.setDocumentStatus(!state.isDocumentActive(document), document);\r\n      }\r\n    })\r\n  );\r\n}\r\n","import * as vscode from \"vscode\";\r\nimport { scrollToLastLineDocument } from \"./scroll\";\r\nimport { State } from \"./state\";\r\n\r\nexport function registerEvents(state: State, subs: vscode.Disposable[]) {\r\n  subs.push(vscode.workspace.onDidOpenTextDocument(onOpen(state)));\r\n  subs.push(vscode.workspace.onDidChangeTextDocument(onChange(state)));\r\n  subs.push(\r\n    vscode.workspace.onDidChangeConfiguration(onChangeConfiguration(state))\r\n  );\r\n}\r\n\r\nconst onChangeConfiguration = (state: State) => () => {\r\n  state.reloadConfiguration();\r\n};\r\n\r\nconst onChange = (state: State) => (event: vscode.TextDocumentChangeEvent) => {\r\n  if (state.isDocumentActive(event.document) && !event.document.isDirty) {\r\n    scrollToLastLineDocument(state, event.document);\r\n  }\r\n};\r\n\r\nconst onOpen = (state: State) => (textDocument: vscode.TextDocument) => {\r\n  scrollToLastLineDocument(state, textDocument);\r\n};\r\n","import * as vscode from \"vscode\";\r\nimport { State } from \"./state\";\r\n\r\nexport function scrollToLastLineDocument(\r\n  state: State,\r\n  textDocument: vscode.TextDocument\r\n) {\r\n  vscode.window.visibleTextEditors\r\n    .filter((editor) => editor.document === textDocument)\r\n    .forEach((editor) => scrollToLastLineEditor(state, editor));\r\n}\r\n\r\nfunction scrollToLastLineEditor(state: State, textEditor: vscode.TextEditor) {\r\n  const position = new vscode.Position(\r\n    textEditor.document.lineCount - 2,\r\n    textEditor.selection.start.character\r\n  );\r\n  textEditor.selection = new vscode.Selection(position, position);\r\n\r\n  textEditor.revealRange(\r\n    new vscode.Range(position, position),\r\n    state.getRevealType()\r\n  );\r\n}\r\n","import * as vscode from \"vscode\";\r\n\r\ntype ActiveStatusChanged = (\r\n  isActive: boolean,\r\n  document: vscode.TextDocument\r\n) => void;\r\n\r\nexport interface State {\r\n  setDocumentStatus(isActive: boolean, textEditor: vscode.TextDocument): void;\r\n  isDocumentActive(document: vscode.TextDocument): boolean;\r\n  onActiveStatusChanged(callback: ActiveStatusChanged): void;\r\n  reloadConfiguration(): void;\r\n  getRevealType(): vscode.TextEditorRevealType;\r\n}\r\n\r\nconst keys = {\r\n  activeDocument: \"activeDocument\",\r\n  keepLastLineInCenter: \"keepLastLineInCenter\",\r\n};\r\n\r\nexport function buildState(context: vscode.ExtensionContext): State {\r\n  const state = context.globalState;\r\n\r\n  let config = getConfiguration();\r\n  const reloadConfiguration = () => {\r\n    config = getConfiguration();\r\n  };\r\n\r\n  const statusChangeSubscribes: ActiveStatusChanged[] = [];\r\n\r\n  return {\r\n    setDocumentStatus: setDocumentStatus(state, statusChangeSubscribes),\r\n    isDocumentActive: isDocumentActive(state),\r\n    reloadConfiguration: reloadConfiguration,\r\n    onActiveStatusChanged: (callback) => statusChangeSubscribes.push(callback),\r\n    getRevealType: () => getRevealType(config),\r\n  };\r\n}\r\n\r\nconst getConfiguration = () => vscode.workspace.getConfiguration(\"autoscroll\");\r\n\r\nconst getRevealType = (\r\n  config: vscode.WorkspaceConfiguration\r\n): vscode.TextEditorRevealType => {\r\n  const keepLastLineInCenter = config.get(keys.keepLastLineInCenter);\r\n  return keepLastLineInCenter === true\r\n    ? vscode.TextEditorRevealType.InCenter\r\n    : vscode.TextEditorRevealType.Default;\r\n};\r\n\r\nconst isDocumentActive =\r\n  (state: vscode.Memento) => (textDocument: vscode.TextDocument) => {\r\n    const activeDocuments = getActiveDocuments(state);\r\n    const uri = textDocument.uri.toString();\r\n\r\n    return activeDocuments.has(uri);\r\n  };\r\n\r\nconst setDocumentStatus =\r\n  (state: vscode.Memento, subscribes: ActiveStatusChanged[]) =>\r\n  (isActive: boolean, textDocument: vscode.TextDocument): void => {\r\n    const activeDocuments = getActiveDocuments(state);\r\n    const uri = textDocument.uri.toString();\r\n\r\n    if (!isActive) {\r\n      activeDocuments.delete(uri);\r\n    } else {\r\n      activeDocuments.add(uri);\r\n    }\r\n\r\n    state.update(keys.activeDocument, [...activeDocuments.values()]);\r\n    subscribes.forEach((x) => x(isActive, textDocument));\r\n  };\r\n\r\nconst getActiveDocuments = (state: vscode.Memento): Set<string> =>\r\n  new Set<string>(state.get(keys.activeDocument, []));\r\n","import * as vscode from \"vscode\";\r\nimport { State } from \"./state\";\r\n\r\nexport function registerStatusBar(state: State, subs: vscode.Disposable[]) {\r\n  const statusBar = createStatusBarItem();\r\n  state.onActiveStatusChanged((isActive) =>\r\n    updateStatusBarItem(statusBar, isActive)\r\n  );\r\n\r\n  reloadStatusBarItem(\r\n    state,\r\n    statusBar,\r\n    vscode.window.activeTextEditor?.document\r\n  );\r\n\r\n  subs.push(\r\n    vscode.window.onDidChangeActiveTextEditor((event) =>\r\n      reloadStatusBarItem(state, statusBar, event?.document)\r\n    )\r\n  );\r\n}\r\n\r\nfunction createStatusBarItem(): vscode.StatusBarItem {\r\n  const item = vscode.window.createStatusBarItem(\r\n    vscode.StatusBarAlignment.Right,\r\n    100\r\n  );\r\n  item.command = \"autoScroll.toggle\";\r\n  return item;\r\n}\r\n\r\nfunction reloadStatusBarItem(\r\n  state: State,\r\n  statusBar: vscode.StatusBarItem,\r\n  document: vscode.TextDocument | undefined\r\n) {\r\n  const isActive = document ? state.isDocumentActive(document) : undefined;\r\n  updateStatusBarItem(statusBar, isActive);\r\n}\r\n\r\nfunction updateStatusBarItem(\r\n  statusBar: vscode.StatusBarItem,\r\n  isActive: boolean | undefined\r\n) {\r\n  if (isActive === true) {\r\n    statusBar.tooltip = \"Auto Scroll is Active\";\r\n    statusBar.text = \"$(check) AS\";\r\n    statusBar.show();\r\n  } else if (isActive === false) {\r\n    statusBar.tooltip = \"Auto Scroll is Deactivate\";\r\n    statusBar.text = \"$(x) AS\";\r\n    statusBar.show();\r\n  } else {\r\n    statusBar.hide();\r\n  }\r\n}\r\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from \"vscode\";\nimport { registerCommands } from \"./commands\";\nimport { registerEvents } from \"./events\";\nimport { buildState } from \"./state\";\nimport { registerStatusBar } from \"./statusBar\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  const state = buildState(context);\n\n  registerCommands(state, context.subscriptions);\n  registerEvents(state, context.subscriptions);\n  registerStatusBar(state, context.subscriptions);\n}\n\nexport function deactivate() {}\n"],"names":["state","subs","push","vscode","commands","registerCommand","window","activeTextEditor","setDocumentStatus","document","isDocumentActive","workspace","onDidOpenTextDocument","onOpen","onDidChangeTextDocument","onChange","onDidChangeConfiguration","onChangeConfiguration","reloadConfiguration","event","isDirty","scrollToLastLineDocument","textDocument","visibleTextEditors","filter","editor","forEach","textEditor","position","Position","lineCount","selection","start","character","Selection","revealRange","Range","getRevealType","scrollToLastLineEditor","keys","context","globalState","config","getConfiguration","statusChangeSubscribes","onActiveStatusChanged","callback","get","TextEditorRevealType","InCenter","Default","activeDocuments","getActiveDocuments","uri","toString","has","subscribes","isActive","add","delete","update","values","x","Set","reloadStatusBarItem","statusBar","updateStatusBarItem","undefined","tooltip","text","show","hide","item","createStatusBarItem","StatusBarAlignment","Right","command","onDidChangeActiveTextEditor","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","buildState","registerCommands","subscriptions","registerEvents","registerStatusBar"],"sourceRoot":""}